import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from filters.recipe_filter import RecipeSearchFilter
from filters.favorites_filter import FavoritesFilter
from services.api_client import meal_api
from storage.data_manager import add_favorite, remove_favorite, is_favorite, save_menu
from utils.formatters import format_recipe
from keyboards.inline import get_recipe_actions, get_main_menu
from states.recipe_states import RecipeStates

logger = logging.getLogger(__name__)
router = Router()

# –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_recipes = {}

@router.message(RecipeStates.waiting_search, RecipeSearchFilter())
async def search_recipe(message: Message, state: FSMContext):
    """–ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    query = message.text.strip()
    logger.info(f"–ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞: {query}")
    
    await message.answer("üîç –∏—â—É —Ä–µ—Ü–µ–ø—Ç—ã...")
    
    recipes = await meal_api.search_by_name(query)
    
    if recipes:
        # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
        recipe = recipes[0]
        text = format_recipe(recipe)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_recipes[user_id] = recipe
        
        is_fav = await is_favorite(user_id, recipe['idMeal'])
        kb = get_recipe_actions(recipe['idMeal'], is_fav)
        
        await message.answer(text, reply_markup=kb)
    else:
        await message.answer(
            f"üòî –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'\n\n–ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            reply_markup=get_main_menu()
        )
    
    await state.clear()

@router.message(RecipeStates.waiting_search)
async def invalid_search(message: Message):
    """–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    await message.answer("‚ùå –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")

@router.callback_query(F.data.startswith("show_fav_"))
async def show_favorite_recipe(callback: CallbackQuery):
    """–ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
    recipe_id = callback.data.replace("show_fav_", "")
    logger.info(f"–ø–æ–∫–∞–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ {recipe_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    await callback.message.edit_text("üîç –∑–∞–≥—Ä—É–∂–∞—é —Ä–µ—Ü–µ–ø—Ç...")
    
    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    from storage.data_manager import get_favorite_by_id
    recipe = await get_favorite_by_id(callback.from_user.id, recipe_id)
    
    if recipe:
        text = format_recipe(recipe)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        user_recipes[user_id] = recipe
        
        # —ç—Ç–æ —Ç–æ—á–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É
        kb = get_recipe_actions(recipe_id, True, from_favorites=True)
        
        await callback.message.edit_text(text, reply_markup=kb)
        logger.info(f"—Ä–µ—Ü–µ–ø—Ç {recipe_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω")
    else:
        await callback.message.edit_text(
            "üòî —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º",
            reply_markup=get_main_menu()
        )
        logger.error(f"—Ä–µ—Ü–µ–ø—Ç {recipe_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
    
    await callback.answer()

@router.callback_query(FavoritesFilter())
async def handle_favorites(callback: CallbackQuery):
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º"""
    data = callback.data
    user_id = callback.from_user.id
    
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recipe = user_recipes.get(user_id)
    
    if not recipe:
        await callback.answer("‚ùå —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    recipe_id = recipe['idMeal']
    
    if data.startswith("add_fav_"):
        success = await add_favorite(user_id, recipe)
        if success:
            await callback.answer("‚≠ê –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            kb = get_recipe_actions(recipe_id, True)
            await callback.message.edit_reply_markup(reply_markup=kb)
        else:
            await callback.answer("‚ö†Ô∏è —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
    
    elif data.startswith("remove_fav_"):
        success = await remove_favorite(user_id, recipe_id)
        if success:
            await callback.answer("‚ùå —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            kb = get_recipe_actions(recipe_id, False)
            await callback.message.edit_reply_markup(reply_markup=kb)
        else:
            await callback.answer("‚ùå –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("category:"))
async def show_category(callback: CallbackQuery):
    """–ø–æ–∫–∞–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split(":", 1)[1]
    
    await callback.message.edit_text(f"üîç –∏—â—É —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}...")
    
    recipes = await meal_api.get_by_category(category)
    
    if recipes:
        recipe = recipes[0]  # –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
        text = format_recipe(recipe)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        user_recipes[user_id] = recipe
        
        is_fav = await is_favorite(user_id, recipe['idMeal'])
        kb = get_recipe_actions(recipe['idMeal'], is_fav)
        
        await callback.message.edit_text(text, reply_markup=kb)
    else:
        await callback.message.edit_text(
            f"üòî –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}",
            reply_markup=get_main_menu()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("show_fav_"))
async def show_favorite_recipe(callback: CallbackQuery):
    """–ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
    recipe_id = callback.data.replace("show_fav_", "")
    
    await callback.message.edit_text("üîç –∑–∞–≥—Ä—É–∂–∞—é —Ä–µ—Ü–µ–ø—Ç...")
    
    recipe = await meal_api.get_by_id(recipe_id)
    
    if recipe:
        text = format_recipe(recipe)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        user_recipes[user_id] = recipe
        
        # —ç—Ç–æ —Ç–æ—á–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
        kb = get_recipe_actions(recipe_id, True)
        
        await callback.message.edit_text(text, reply_markup=kb)
    else:
        await callback.message.edit_text(
            "üòî –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç",
            reply_markup=get_main_menu()
        )
    
    await callback.answer()

@router.message(RecipeSearchFilter())
async def direct_search(message: Message):
    """–ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã"""
    query = message.text.strip()
    
    # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å
    if len(query) < 3:
        return
    
    await message.answer("üîç –∏—â—É —Ä–µ—Ü–µ–ø—Ç—ã...")
    
    recipes = await meal_api.search_by_name(query)
    
    if recipes:
        recipe = recipes[0]
        text = format_recipe(recipe)
        
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        user_recipes[user_id] = recipe
        
        is_fav = await is_favorite(user_id, recipe['idMeal'])
        kb = get_recipe_actions(recipe['idMeal'], is_fav)
        
        await message.answer(text, reply_markup=kb)
    else:
        await message.answer(
            f"ü§∑‚Äç‚ôÄÔ∏è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'\n\n–∏—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
            reply_markup=get_main_menu()
        )